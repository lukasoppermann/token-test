
//
// StyleDictionary.swift
//
// Do not edit directly
// Generated on Tue, 13 Oct 2020 20:43:35 GMT
//


import UIKit

public class StyleDictionary {
    public static let bodyH3FontFamily = Roboto
    public static let bodyH3FontSize = 20
    public static let bodyH3FontStyle = Medium
    public static let bodyH3LetterSpacing = 2
    public static let bodyH3LineHeight = 160
    public static let bodyH3ParagraphIndent = 5
    public static let bodyH3ParagraphSpacing = 8
    public static let bodyH3TextCase = uppercase
    public static let bodyH3TextDecoration = none
    public static let bodyH4StrikeThroughFontFamily = Roboto
    public static let bodyH4StrikeThroughFontSize = 16
    public static let bodyH4StrikeThroughFontStyle = Medium
    public static let bodyH4StrikeThroughLetterSpacing = 0
    public static let bodyH4StrikeThroughLineHeight = normal
    public static let bodyH4StrikeThroughParagraphIndent = 0
    public static let bodyH4StrikeThroughParagraphSpacing = 0
    public static let bodyH4StrikeThroughTextCase = none
    public static let bodyH4StrikeThroughTextDecoration = line-through
    public static let bordersDashedOutsideDashPattern = 5,5,3,3
    public static let bordersDashedOutsideStroke = rgba(64, 255, 186, 1)
    public static let bordersDashedOutsideStrokeAlign = outside
    public static let bordersDashedOutsideStrokeCap = none
    public static let bordersDashedOutsideStrokeJoin = miter
    public static let bordersDashedOutsideStrokeMiterAngle = 4
    public static let bordersDashedOutsideStrokeWeight = 1
    public static let bordersSingleDashPattern = 
    public static let bordersSingleStroke = rgba(112, 141, 242, 1)
    public static let bordersSingleStrokeAlign = inside
    public static let bordersSingleStrokeCap = none
    public static let bordersSingleStrokeJoin = miter
    public static let bordersSingleStrokeMiterAngle = 4
    public static let bordersSingleStrokeWeight = 1
    public static let bordersSingleStyleDashPattern = 
    public static let bordersSingleStyleStroke = rgba(4, 74, 255, 1)
    public static let bordersSingleStyleStrokeAlign = inside
    public static let bordersSingleStyleStrokeCap = none
    public static let bordersSingleStyleStrokeJoin = miter
    public static let bordersSingleStyleStrokeMiterAngle = 4
    public static let bordersSingleStyleStrokeWeight = 1
    public static let bordersUnsupportedGradientBordersDashPattern = 
    public static let bordersUnsupportedGradientBordersStrokeAlign = inside
    public static let bordersUnsupportedGradientBordersStrokeCap = none
    public static let bordersUnsupportedGradientBordersStrokeJoin = miter
    public static let bordersUnsupportedGradientBordersStrokeMiterAngle = 4
    public static let bordersUnsupportedGradientBordersStrokeWeight = 1
    public static let bordersUnsupportedImageBordersDashPattern = 
    public static let bordersUnsupportedImageBordersStrokeAlign = inside
    public static let bordersUnsupportedImageBordersStrokeCap = none
    public static let bordersUnsupportedImageBordersStrokeJoin = miter
    public static let bordersUnsupportedImageBordersStrokeMiterAngle = 4
    public static let bordersUnsupportedImageBordersStrokeWeight = 1
    public static let bordersUnsupportedMultipleBordersDashPattern = 5,10
    public static let bordersUnsupportedMultipleBordersStroke = rgba(255, 230, 0, 1)
    public static let bordersUnsupportedMultipleBordersStrokeAlign = inside
    public static let bordersUnsupportedMultipleBordersStrokeCap = none
    public static let bordersUnsupportedMultipleBordersStrokeJoin = miter
    public static let bordersUnsupportedMultipleBordersStrokeMiterAngle = 4
    public static let bordersUnsupportedMultipleBordersStrokeWeight = 1
    public static let colorsMultipleFills0 = rgba(64, 255, 186, 1)
    public static let colorsMultipleFills1 = rgba(0, 0, 0, 0.1)
    public static let colorsSingleBlue = rgba(4, 74, 255, 1)
    public static let colorsSpecialCharactersAnderung = rgba(52, 86, 175, 1)
    public static let colorsSpecialCharactersðŸ˜… = rgba(64, 223, 80, 1)
    public static let effectBackgroundBlurRadius = 4
    public static let effectBackgroundBlurType = backgroundBlur
    public static let effectDropShadowSingleColor = rgba(0, 0, 0, 0.25)
    public static let effectDropShadowSingleOffsetX = 0
    public static let effectDropShadowSingleOffsetY = 4
    public static let effectDropShadowSingleRadius = 4
    public static let effectDropShadowSingleSpread = 0
    public static let effectDropShadowSingleType = dropShadow
    public static let effectInnerShadowMultiple0Color = rgba(0, 0, 0, 0.25)
    public static let effectInnerShadowMultiple0OffsetX = 0
    public static let effectInnerShadowMultiple0OffsetY = 4
    public static let effectInnerShadowMultiple0Radius = 4
    public static let effectInnerShadowMultiple0Spread = 0
    public static let effectInnerShadowMultiple0Type = innerShadow
    public static let effectInnerShadowMultiple1Color = rgba(0, 0, 0, 1)
    public static let effectInnerShadowMultiple1OffsetX = 10
    public static let effectInnerShadowMultiple1OffsetY = 100
    public static let effectInnerShadowMultiple1Radius = 1
    public static let effectInnerShadowMultiple1Spread = 0.5
    public static let effectInnerShadowMultiple1Type = innerShadow
    public static let effectInnerShadowMultiple2Color = rgba(0, 0, 0, 0.25)
    public static let effectInnerShadowMultiple2OffsetX = -4
    public static let effectInnerShadowMultiple2OffsetY = 2
    public static let effectInnerShadowMultiple2Radius = 3
    public static let effectInnerShadowMultiple2Spread = 11
    public static let effectInnerShadowMultiple2Type = innerShadow
    public static let effectLayerBlurRadius = 4
    public static let effectLayerBlurType = layerBlur
    public static let gradientMultiple0GradientType = linear
    public static let gradientMultiple0Opacity = 1
    public static let gradientMultiple0Stops0Color = rgba(255, 184, 0, 1)
    public static let gradientMultiple0Stops0Position = 0
    public static let gradientMultiple0Stops1Color = rgba(255, 184, 0, 1)
    public static let gradientMultiple0Stops1Position = 1
    public static let gradientMultiple1GradientType = radial
    public static let gradientMultiple1Opacity = 1
    public static let gradientMultiple1Stops0Color = rgba(255, 255, 255, 1)
    public static let gradientMultiple1Stops0Position = 0
    public static let gradientMultiple1Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientMultiple1Stops1Position = 1
    public static let gradientMultiple2GradientType = angular
    public static let gradientMultiple2Opacity = 1
    public static let gradientMultiple2Stops0Color = rgba(207, 48, 48, 1)
    public static let gradientMultiple2Stops0Position = 0
    public static let gradientMultiple2Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientMultiple2Stops1Position = 1
    public static let gradientMultiple3GradientType = diamond
    public static let gradientMultiple3Opacity = 1
    public static let gradientMultiple3Stops0Color = rgba(74, 79, 204, 1)
    public static let gradientMultiple3Stops0Position = 0
    public static let gradientMultiple3Stops1Color = rgba(255, 255, 255, 1)
    public static let gradientMultiple3Stops1Position = 1
    public static let gradientSingleWithMultipleColorStopsGradientType = radial
    public static let gradientSingleWithMultipleColorStopsOpacity = 1
    public static let gradientSingleWithMultipleColorStopsStops0Color = rgba(255, 184, 0, 1)
    public static let gradientSingleWithMultipleColorStopsStops0Position = 0
    public static let gradientSingleWithMultipleColorStopsStops1Color = rgba(255, 138, 0, 1)
    public static let gradientSingleWithMultipleColorStopsStops1Position = 0.34
    public static let gradientSingleWithMultipleColorStopsStops2Color = rgba(255, 46, 0, 1)
    public static let gradientSingleWithMultipleColorStopsStops2Position = 0.65
    public static let gradientSingleWithMultipleColorStopsStops3Color = rgba(255, 0, 0, 1)
    public static let gradientSingleWithMultipleColorStopsStops3Position = 1
    public static let gridMultiple0Alignment = max
    public static let gridMultiple0Count = 7
    public static let gridMultiple0GutterSize = 20
    public static let gridMultiple0Offset = 3
    public static let gridMultiple0Pattern = columns
    public static let gridMultiple0SectionSize = 1
    public static let gridMultiple1Alignment = center
    public static let gridMultiple1Count = 6
    public static let gridMultiple1GutterSize = 20
    public static let gridMultiple1Pattern = columns
    public static let gridMultiple1SectionSize = 12
    public static let gridMultiple2Alignment = stretch
    public static let gridMultiple2Count = 5
    public static let gridMultiple2GutterSize = 20
    public static let gridMultiple2Offset = 10
    public static let gridMultiple2Pattern = columns
    public static let gridMultiple3Alignment = min
    public static let gridMultiple3Count = 4
    public static let gridMultiple3GutterSize = 20
    public static let gridMultiple3Offset = 13
    public static let gridMultiple3Pattern = columns
    public static let gridMultiple3SectionSize = 34
    public static let gridMultiple4Alignment = max
    public static let gridMultiple4Count = 5
    public static let gridMultiple4GutterSize = 20
    public static let gridMultiple4Offset = 10
    public static let gridMultiple4Pattern = rows
    public static let gridMultiple4SectionSize = 8
    public static let gridMultiple5Alignment = center
    public static let gridMultiple5Count = 4
    public static let gridMultiple5GutterSize = 10
    public static let gridMultiple5Pattern = rows
    public static let gridMultiple5SectionSize = 8
    public static let gridMultiple6Alignment = min
    public static let gridMultiple6Count = 3
    public static let gridMultiple6GutterSize = 20
    public static let gridMultiple6Offset = 10
    public static let gridMultiple6Pattern = rows
    public static let gridMultiple6SectionSize = 8
    public static let gridMultiple7Pattern = grid
    public static let gridMultiple7SectionSize = 8
    public static let gridSingleAlignment = center
    public static let gridSingleCount = 5
    public static let gridSingleGutterSize = 20
    public static let gridSinglePattern = columns
    public static let gridSingleSectionSize = 11
    public static let radiiMixedRadiiBottomLeft = 0
    public static let radiiMixedRadiiBottomRight = 3.5
    public static let radiiMixedRadiiTopLeft = 1
    public static let radiiMixedRadiiTopRight = 2
    public static let radiiMixedRadiusType = mixed
    public static let radiiMixedSmoothing = 0
    public static let radiiSameWithSmoothingRadiiBottomLeft = 5
    public static let radiiSameWithSmoothingRadiiBottomRight = 5
    public static let radiiSameWithSmoothingRadiiTopLeft = 5
    public static let radiiSameWithSmoothingRadiiTopRight = 5
    public static let radiiSameWithSmoothingRadius = 5
    public static let radiiSameWithSmoothingRadiusType = single
    public static let radiiSameWithSmoothingSmoothing = 0.65
    public static let sizes32 = 32.72
    public static let sizesFrame = 32
    public static let sizesRect = 32
    public static let sizesShapeInComponent = 32
}
